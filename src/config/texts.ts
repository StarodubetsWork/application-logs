export const texts = {
  common: {
    loading: "Loading...",
    cancel: "Cancel",
    save: "Save",
    delete: "Delete",
    edit: "Edit",
    close: "Close",
    confirm: "Confirm",
    yes: "Yes",
    no: "No",
    noData: "No data available",
    error: "An error occurred",
    success: "Success",
    updating: "Updating...",
    deleting: "Deleting...",
    saving: "Saving...",
    required: "This field is required",
  },
  homePage: {
    title: "Application Logs",
    subtitle: "Monitor and manage your application logs efficiently",
    newLogButton: "New Log",
    noLogsMessage: "No logs available. Create your first log entry to get started.",
    a11y: {
      mainIcon: "Application logs icon",
      addButton: "Add new log entry",
      addButtonLoading: "Loading logs data",
      dataTable: "Application logs data table",
      mainContent: "Application logs main content",
      pageTitle: "page-title",
      loadingStatus: "loading-status",
    },
  },
  modals: {
    addLog: {
      title: "Add New Log",
      submitButton: "Add Log",
    },
    editLog: {
      title: "Edit Log",
      submitButton: "Update Log",
    },
    deleteConfirm: {
      title: "Confirm Delete",
      titleSuffix: "Log",
      message: "Are you sure you want to delete this log entry?",
      warning: "This action cannot be undone.",
      logDetails: "Log details:",
      confirmButton: "Delete",
      cancelButton: "Cancel",
    },

    a11y: {
      closeModal: "Close",
    },
  },
  forms: {
    logForm: {
      ownerLabel: "Owner",
      ownerPlaceholder: "Enter log owner",
      textLabel: "Log Text",
      textPlaceholder: "Enter log message...",
      submitButton: "Submit",
      cancelButton: "Cancel",

      validation: {
        ownerRequired: "Owner is required",
        ownerMinLength: "Owner must be at least 2 characters",
        ownerMaxLength: "Owner must not exceed 50 characters",
        textRequired: "Log text is required",
        textMinLength: "Log text must be at least 5 characters",
        textMaxLength: "Log text must not exceed 500 characters",
      },
    },
  },
  table: {
    headers: {
      owner: "Owner",
      createdAt: "Created At",
      updatedAt: "Updated At",
      text: "Text",
    },
    actions: {
      delete: "Delete",
      edit: "Edit",
      view: "View",
    },
    noData: "No logs found",
    noDataDescription: "Get started by adding your first log entry.",
    loading: "Loading logs...",
    actionsColumnHeader: "Actions",

    a11y: {
      dataTable: "Data table",
      applicationLogsTable: "Application logs data table",
      rowActions: "Row actions",
      editLogEntry: "Edit log entry",
      clickToEditLogEntry: "Click to edit log entry",
      actionForEntry: "for entry",
      actionForRow: "for row",
      sortBy: "Sort by",
      sortAscending: "Sort ascending",
      sortDescending: "Sort descending",
    },
  },
  pagination: {
    previous: "Previous",
    previousShort: "Prev",
    next: "Next",
    page: "Page",
    of: "of",
    showing: "Showing",
    to: "to",
    results: "results",
    totalResults: "total results",

    a11y: {
      pagination: "Pagination navigation",
      paginationControls: "Pagination controls",
      pageNumbers: "Page numbers",
      currentPage: "Current page",
      goToPage: "Go to page",
      goToPreviousPage: "Go to previous page, currently on page",
      goToNextPage: "Go to next page, currently on page",
    },
  },
  notifications: {
    log: {
      created: "Log created successfully!",
      createdFor: "Log created successfully for",
      updated: "Log updated successfully!",
      deleted: "Log deleted successfully!",
      deletedBy: "Log by {owner} deleted successfully",
      createError: "Failed to create log",
      updateError: "Failed to update log",
      deleteError: "Failed to delete log",
      loadError: "Failed to load logs",
      fetchError: "Failed to fetch logs",
    },
  },
  loading: {
    logs: "Loading logs...",
    creating: "Creating log...",
    updating: "Updating log...",
    deleting: "Deleting log...",
    submitting: "Submitting...",
    generic: "Content is loading, please wait",
    logDataMessage: "Currently loading log data, please wait",
  },
  errors: {
    generic: "Something went wrong. Please try again.",
    network: "Network error. Please check your connection.",
    server: "Server error. Please try again later.",
    validation: "Please check your input and try again.",
    notFound: "Resource not found",
    unauthorized: "You are not authorized to perform this action",
  },
} as const;
